{
  "_args": [
    [
      {
        "raw": "flat@^5.0.2",
        "scope": null,
        "escapedName": "flat",
        "name": "flat",
        "rawSpec": "^5.0.2",
        "spec": ">=5.0.2 <6.0.0",
        "type": "range"
      },
      "/Users/neoris/dev/poc-devops/poc/node_modules/yargs-unparser"
    ]
  ],
  "_from": "flat@^5.0.2",
  "_hasShrinkwrap": false,
  "_id": "flat@5.0.2",
  "_location": "/flat",
  "_nodeVersion": "14.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/flat_5.0.2_1596727742231_0.4814206074995171"
  },
  "_npmUser": {
    "name": "timoxley",
    "email": "secoif@gmail.com"
  },
  "_npmVersion": "6.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flat@^5.0.2",
    "scope": null,
    "escapedName": "flat",
    "name": "flat",
    "rawSpec": "^5.0.2",
    "spec": ">=5.0.2 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/yargs-unparser"
  ],
  "_resolved": "https://globaldevtools.bbva.com:443/artifactory/api/npm/npm-repo/flat/-/flat-5.0.2.tgz",
  "_shasum": "8ca6fe332069ffa9d324c327198c598259ceb241",
  "_shrinkwrap": null,
  "_spec": "flat@^5.0.2",
  "_where": "/Users/neoris/dev/poc-devops/poc/node_modules/yargs-unparser",
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com"
  },
  "bin": {
    "flat": "cli.js"
  },
  "bugs": {
    "url": "https://github.com/hughsk/flat/issues"
  },
  "dependencies": {},
  "description": "Take a nested Javascript object and flatten it, or unflatten an object with delimited keys",
  "devDependencies": {
    "mocha": "~8.1.1",
    "standard": "^14.3.4"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "tarball": "https://globaldevtools.bbva.com:443/artifactory/api/npm/npm-repo/flat/-/flat-5.0.2.tgz",
    "shasum": "8ca6fe332069ffa9d324c327198c598259ceb241"
  },
  "gitHead": "e5ffd664df8a1fcc05adc22dd0ac6a2b32a0955d",
  "homepage": "https://github.com/hughsk/flat",
  "keywords": [
    "flat",
    "json",
    "flatten",
    "unflatten",
    "split",
    "object",
    "nested"
  ],
  "license": "BSD-3-Clause",
  "main": "index.js",
  "name": "flat",
  "optionalDependencies": {},
  "readme": "# flat [![Build Status](https://secure.travis-ci.org/hughsk/flat.png?branch=master)](http://travis-ci.org/hughsk/flat)\n\nTake a nested Javascript object and flatten it, or unflatten an object with\ndelimited keys.\n\n## Installation\n\n``` bash\n$ npm install flat\n```\n\n## Methods\n\n### flatten(original, options)\n\nFlattens the object - it'll return an object one level deep, regardless of how\nnested the original object was:\n\n``` javascript\nvar flatten = require('flat')\n\nflatten({\n    key1: {\n        keyA: 'valueI'\n    },\n    key2: {\n        keyB: 'valueII'\n    },\n    key3: { a: { b: { c: 2 } } }\n})\n\n// {\n//   'key1.keyA': 'valueI',\n//   'key2.keyB': 'valueII',\n//   'key3.a.b.c': 2\n// }\n```\n\n### unflatten(original, options)\n\nFlattening is reversible too, you can call `flatten.unflatten()` on an object:\n\n``` javascript\nvar unflatten = require('flat').unflatten\n\nunflatten({\n    'three.levels.deep': 42,\n    'three.levels': {\n        nested: true\n    }\n})\n\n// {\n//     three: {\n//         levels: {\n//             deep: 42,\n//             nested: true\n//         }\n//     }\n// }\n```\n\n## Options\n\n### delimiter\n\nUse a custom delimiter for (un)flattening your objects, instead of `.`.\n\n### safe\n\nWhen enabled, both `flat` and `unflatten` will preserve arrays and their\ncontents. This is disabled by default.\n\n``` javascript\nvar flatten = require('flat')\n\nflatten({\n    this: [\n        { contains: 'arrays' },\n        { preserving: {\n              them: 'for you'\n        }}\n    ]\n}, {\n    safe: true\n})\n\n// {\n//     'this': [\n//         { contains: 'arrays' },\n//         { preserving: {\n//             them: 'for you'\n//         }}\n//     ]\n// }\n```\n\n### object\n\nWhen enabled, arrays will not be created automatically when calling unflatten, like so:\n\n``` javascript\nunflatten({\n    'hello.you.0': 'ipsum',\n    'hello.you.1': 'lorem',\n    'hello.other.world': 'foo'\n}, { object: true })\n\n// hello: {\n//     you: {\n//         0: 'ipsum',\n//         1: 'lorem',\n//     },\n//     other: { world: 'foo' }\n// }\n```\n\n### overwrite\n\nWhen enabled, existing keys in the unflattened object may be overwritten if they cannot hold a newly encountered nested value:\n\n```javascript\nunflatten({\n    'TRAVIS': 'true',\n    'TRAVIS.DIR': '/home/travis/build/kvz/environmental'\n}, { overwrite: true })\n\n// TRAVIS: {\n//     DIR: '/home/travis/build/kvz/environmental'\n// }\n```\n\nWithout `overwrite` set to `true`, the `TRAVIS` key would already have been set to a string, thus could not accept the nested `DIR` element.\n\nThis only makes sense on ordered arrays, and since we're overwriting data, should be used with care.\n\n\n### maxDepth\n\nMaximum number of nested objects to flatten.\n\n``` javascript\nvar flatten = require('flat')\n\nflatten({\n    key1: {\n        keyA: 'valueI'\n    },\n    key2: {\n        keyB: 'valueII'\n    },\n    key3: { a: { b: { c: 2 } } }\n}, { maxDepth: 2 })\n\n// {\n//   'key1.keyA': 'valueI',\n//   'key2.keyB': 'valueII',\n//   'key3.a': { b: { c: 2 } }\n// }\n```\n\n### transformKey\n\nTransform each part of a flat key before and after flattening.\n\n```javascript\nvar flatten = require('flat')\nvar unflatten = require('flat').unflatten\n\nflatten({\n    key1: {\n        keyA: 'valueI'\n    },\n    key2: {\n        keyB: 'valueII'\n    },\n    key3: { a: { b: { c: 2 } } }\n}, {\n    transformKey: function(key){\n      return '__' + key + '__';\n    }\n})\n\n// {\n//   '__key1__.__keyA__': 'valueI',\n//   '__key2__.__keyB__': 'valueII',\n//   '__key3__.__a__.__b__.__c__': 2\n// }\n\nunflatten({\n      '__key1__.__keyA__': 'valueI',\n      '__key2__.__keyB__': 'valueII',\n      '__key3__.__a__.__b__.__c__': 2\n}, {\n    transformKey: function(key){\n      return key.substring(2, key.length - 2)\n    }\n})\n\n// {\n//     key1: {\n//         keyA: 'valueI'\n//     },\n//     key2: {\n//         keyB: 'valueII'\n//     },\n//     key3: { a: { b: { c: 2 } } }\n// }\n```\n\n## Command Line Usage\n\n`flat` is also available as a command line tool. You can run it with \n[`npx`](https://ghub.io/npx):\n\n```sh\nnpx flat foo.json\n```\n\nOr install the `flat` command globally:\n \n```sh\nnpm i -g flat && flat foo.json\n```\n\nAccepts a filename as an argument:\n\n```sh\nflat foo.json\n```\n\nAlso accepts JSON on stdin:\n\n```sh\ncat foo.json | flat\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/flat.git"
  },
  "scripts": {
    "test": "mocha -u tdd --reporter spec && standard cli.js index.js test/index.js"
  },
  "version": "5.0.2"
}
